#include "DataIO.h"

DataIO::DataIO(QString fileName, int fileFlag)
	:m_flag(fileFlag),m_PrepareState(true)
{
	m_file.setFileName(fileName);
	
	switch (m_flag)
	{
	case DATA_READ:
		if (!m_file.open(QIODevice::ReadOnly))
		{
			m_flag = DATA_BAD;
			break;
		}
		m_data.setDevice(&m_file);
		m_data.setVersion(QDataStream::Qt_4_8);
		break;
	case DATA_WRITE:
		if (!m_file.open(QIODevice::WriteOnly))
		{
			m_flag = DATA_BAD;
			break;
		}
		m_data.setDevice(&m_file);
		m_data.setVersion(QDataStream::Qt_4_8);
		break;
	default:
		m_flag = DATA_BAD;
		break;
	}
}

int DataIO::writeFileHead(quint32 magic)
{
	if (m_flag == DATA_WRITE && m_PrepareState == true)
	{
		m_data<<magic;
		m_PrepareState = false;

		return DATA_WRITE;
	}

	return DATA_BAD;
}

int DataIO::writeImage(const QImage& img)
{
	if (m_flag == DATA_WRITE && m_PrepareState == false)
	{
		m_data<<img;
		return DATA_WRITE;
	}

	return DATA_BAD;
}

int DataIO::writeAnchorData(const cv::Rect anchorPoints[4], int type)
{
	if (m_flag == DATA_WRITE && m_PrepareState == false)
	{
		QRect rect[4];

		for (int i = 0; i < 4; ++i)
		{
			rect[i] = cvRect2QRect(anchorPoints[i]);
		}

		m_data<<type<<rect[0]<<rect[1]<<rect[2]<<rect[3];

		return DATA_WRITE;
	}

	return DATA_BAD;
}

int DataIO::writeMarkerData(const cv::Rect markersRect[2], bool done)
{
	if (m_flag == DATA_WRITE && m_PrepareState == false)
	{
		QRect rect[2];

		for (int i = 0; i < 2; ++i)
		{
			rect[i] = cvRect2QRect(markersRect[i]);
		}

		m_data<<done<<rect[0]<<rect[1];

		return DATA_WRITE;
	}

	return DATA_BAD;
}

int DataIO::writeFillPointData(vector<FillingPoints_info>& fillingPointGroup)
{
	if (m_flag == DATA_WRITE && m_PrepareState == false)
	{
		int groupSize = fillingPointGroup.size();
		m_data<<groupSize;

		vector<FillingPoints_info>::iterator iter = fillingPointGroup.begin();
		for (;iter != fillingPointGroup.end(); ++iter)
		{
			FillPointData data = fillPointInfo2FillPointData(*iter);
			m_data<<data.fillPointName<<data.fillPointType<<data.itemAmount
				<<data.fillPointId<<data.isCrossWise<<data.singleChoice
				<<data.interval<<data.markerId1
				<<data.markerId2<<data.markerId3;
		}

		return DATA_WRITE;
	}

	return DATA_BAD;
}

int DataIO::writeBarCodeData(vector<Bar_info>& barGroup)
{
	if (m_flag == DATA_WRITE && m_PrepareState == false)
	{
		int groupSize = barGroup.size();
		m_data<<groupSize;

		vector<Bar_info>::iterator iter = barGroup.begin();
		for (;iter != barGroup.end(); ++iter)
		{
			BarCodeData data = barInfo2BarCodeData(*iter);
			m_data<<data.barCodeType<<data.pos;
		}
		return DATA_WRITE;
	}

	return DATA_BAD;
}

int DataIO::writeQuestionData(vector<ItemPos>& questioninfo)
{
	if (m_flag == DATA_WRITE && m_PrepareState == false)
	{
		int groupSize = questioninfo.size();
		m_data<<groupSize;

		vector<ItemPos>::iterator iter = questioninfo.begin();
		for (;iter != questioninfo.end(); ++iter)
		{
			QuestionData data = questionInfo2QuestionData(*iter);
			m_data<<data.questionId<<data.isCrossWise
				<<data.singleChoice<<data.interval
				<<data.markerId1<<data.markerId2
				<<data.markerId3;
		}
		return DATA_WRITE;
	}

	return DATA_BAD;
}

int DataIO::writeClipData(vector<CropArea_info>& cropAreaInfo)
{
	if (m_flag == DATA_WRITE && m_PrepareState == false)
	{
		int groupSize = cropAreaInfo.size();
		m_data<<groupSize;

		vector<CropArea_info>::iterator iter = cropAreaInfo.begin();
		for (;iter != cropAreaInfo.end(); ++iter)
		{
			ClipData data = cropAreaInfo2ClipData(*iter);
			m_data<<data.clipName<<data.groupNum
				<<data.isSecret<<data.pos;
		}
		return DATA_WRITE;
	}

	return DATA_BAD;
}

QRect DataIO::cvRect2QRect(const cv::Rect& rect)
{
	return QRect(QPoint(rect.tl().x,rect.tl().y), QPoint(rect.br().x,rect.br().y));
}

FillPointData DataIO::fillPointInfo2FillPointData(const FillingPoints_info& info)
{
	FillPointData data;
	data.fillPointName = QString::fromLocal8Bit(info.name.c_str());
	data.fillPointType = (int)(info.type);
	data.itemAmount = info.fillingPoints.size();

	vector<ItemPos>::iterator iter = info.fillingPoints.begin();

	for (;iter != info.fillingPoints.end(); ++iter)
	{
		data.fillPointId.push_back(iter->id);
		data.isCrossWise.push_back(iter->isCrosswise);
		data.interval.push_back(iter->interval);
		data.singleChoice.push_back(iter->isSingleChoice);
		data.markerId1.push_back(iter->markerIdx[0]);
		data.markerId2.push_back(iter->markerIdx[1]);
		data.markerId3.push_back(iter->markerIdx[2]);
	}

	return data;
}

BarCodeData DataIO::barInfo2BarCodeData(const Bar_info& info)
{
	BarCodeData data;
	data.barCodeType = (int)(info.barType);
	data.pos = cvRect2QRect(info.pos);
	return data;
}

QuestionData DataIO::questionInfo2QuestionData(const ItemPos& info)
{
	QuestionData data;
	data.questionId = info.id;
	data.isCrossWise = info.isCrosswise;
	data.singleChoice = info.isSingleChoice;
	data.interval = info.interval;
	data.markerId1 = info.markerIdx[0];
	data.markerId2 = info.markerIdx[1];
	data.markerId3 = info.markerIdx[2];

	return data;
}

ClipData DataIO::cropAreaInfo2ClipData(const CropArea_info& info)
{
	ClipData data;
	data.clipName = QString::fromLocal8Bit(info.name.c_str());
	data.groupNum = info.groupNum;
	data.isSecret = info.isSecret;
	data.pos = cvRect2QRect(info.pos);

	return data;
}

cv::Rect DataIO::qRect2CvRect(const QRect& rect)
{

}

FillingPoints_info DataIO::fillPointData2FillPointInfo(const FillPointData& data)
	{
}
Bar_info DataIO::barCodeData2BarInfo(const BarCodeData& data)
	{
}
ItemPos DataIO::questionData2ItemPos(const QuestionData& data)
	{
}
CropArea_info DataIO::clipData2CropAreaInfo(const ClipData& data)
	{
}